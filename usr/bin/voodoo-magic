#!/bin/bash
#
# Voodoo-Magic
#
#    Voodoo-Magic is free software; you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by the Free
#    Software Foundation; either version 2 of the License, or (at your option)
#    any later version.
#
#    Voodoo-Magic is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with Voodoo-Magic; if not, write to the Free Software Foundation,
#    Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

### NAMING CONVENTIONS THROUGHOUT THIS SCRIPT ###
# Variables:
# - UPPERCASE        - global, as in: accessible and all workflows
# - lowercase        - use lower-case vars in your workflows
# Functions:
# - HelperFunctions  - almost all functions are in CamelCase. There are
#                      exceptions, however... e.g. WORKFLOW_<workflow>.

### UNDERLYING DESIGN-CONCEPT ###
# Voodoo-Magic takes advantage of the GNU 'source' binary to include other
# script files. The possibility to spread code across several files brings up
# the idea of structuring your files in a very definite directory tree layout
# and then sourcing them recursively in a predefined order.
# Suddenly it is possible to put process-logic into the directory structure
# itself, meaning that changing the order or location of the script files,
# changes the workflow as scripts are sourced in a different way. If-conditions
# can even decide to either walk down the scripts in directory tree A or
# directory tree B. Not only if-conditions, but also shell arguments could
# manipulate the behaviour in which files are sourced in what order.
#
# Basically a workflow within the framework, is nothing more than a predefined
# directory structure that the framework can source because it knows the
# internal layout. Now assume we call one sub-directory conf/ and another one
# we could call functions/ and another one doc/ and so on, and we have various
# directory structures of exactly this type laying around side by side. We can
# check if a directory with the name $1 exists and if so, recursively source all
# files in a sensefully predefined order inside that directory. That's pretty
# much all the magic there is to it.
#
# Realizing the possibilities of this design-concept, the idea arose to write a
# development framework, by adding plenty of useful helper functions and global
# variables around the workflow before sourcing it, opening the possibility to
# write small scripts by outsourcing all the repetitive logic into the
# outlaying framework. The framework provides an environment for the workflow
# with tools and helpers for repetitive tasks you would otherwise have to write
# over and over.
#
# Severe parts of the design-concept have been adapted from Rear - Relax and
# Recover.

# Product and versioning information
PROGRAM="${0##*/}"
PRODUCT="Voodoo-Magic"
VERSION="rc-0.4.2-r1"
RELEASE_DATE="2012-06-23"

# save command options
CMD_OPTS=( "$@" )

if [[ "$0" == /* ]]; then
    SCRIPT="$0"
else
    SCRIPT="$(which "$0")"
fi
BASEDIR="$(readlink -f ${SCRIPT%/*}/../../)"
CONF_DIR="$BASEDIR/etc/$PROGRAM"
LIB_DIR="$BASEDIR/usr/lib/$PROGRAM"
SHARE_DIR="$BASEDIR/usr/share/$PROGRAM"
LOG_DIR="$BASEDIR/var/log/$PROGRAM"
SPOOL_DIR="$BASEDIR/var/spool/$PROGRAM"
DOC_DIR="$BASEDIR/usr/share/doc/$PROGRAM"

DEBUG=false
DEBUGSCRIPTS=false
SIMULATE=false
VERBOSE=false

EXIT_CODE=0

OPTS="$(getopt -n $PROGRAM -o "hdDvVs" -l "help,version" -- "$@")"
if (( $? != 0 )); then
    echo "Try \`$PROGRAM --help\` for more information."
    exit 1
fi

eval set -- "$OPTS"
while true; do
    case $1 in
        (-h) WORKFLOW="help";;
        (--help) WORKFLOW="help"; detailed=true;;
        (-V|--version) echo -e "$PRODUCT $VERSION / $RELEASE_DATE"; exit 0;;
        (-d) DEBUG=true;;
        (-D) DEBUGSCRIPTS=true;;
        (-v) VERBOSE=true;;
        (-s) SIMULATE=true; VERBOSE=true; DEBUG=true;;
        (--) shift; break;;
        (-*)
            echo "$PROGNAME: unrecognized option '$option'"
            echo "Try \`$PROGRAM --help' for more information."
            exit 1
            ;;
        (*) break;;
    esac
    shift
done

# set workflow to first command line argument or to help/usage
if [[ -z "$WORKFLOW" ]]; then
    if [[ "$1" ]]; then
        WORKFLOW=$1 ; shift
    else
        WORKFLOW="help"
    fi
fi

# keep the remaining command line arguments to feed to the workflow
ARGS=( "$@" )

# Make sure we have the necessary paths (eg. in cron), /sbin will be the first path to search.
for path in /usr/bin /bin /usr/sbin /sbin; do
    case ":$PATH:" in
        (*:"$path":*) ;;
        (*) if [[ -d "$path" ]]; then PATH=$path:$PATH; fi ;;
    esac
done

# require root privileges
#if (( $(id --user) != 0 )); then
#    echo "ERROR: $PRODUCT needs ROOT privileges!" >&2
#    exit 1
#fi

# set some bash options
shopt -s nullglob extglob
hash -r

# make sure that we use only english
export LC_CTYPE=C LC_ALL=C LANG=C

# source default config and then user config
source "$SHARE_DIR/default.conf"
source "$CONF_DIR/$PROGRAM.conf"

# source all libraries
for lib in "$LIB_DIR"/*.sh;do
    source "$lib"
done

if ! has_binary pidof; then
    echo "ERROR: Required program 'pidof' missing, please check your PATH" >&2
    exit 1
fi

# do not run if another instance is running. pidof -x will always report at least $$
PID=$(pidof -x -o %PPID "$0") || true
if IsInArray "$WORKFLOW" "${LOCKLESS_WORKFLOWS[@]}"; then
    LOGFILE="$LOGFILE.lockless"
elif [[ "$PID" ]] ; then
    echo "ERROR: $SCRIPT is already running, not starting again" >&2
    exit 1
fi

# keep old log file
if [[ -r "$LOGFILE" ]]; then
    mv -f "$LOGFILE" "$LOGFILE".old 2>&8
fi
exec 2>"$LOGFILE" || echo "ERROR: Could not create $LOGFILE" >&2

Log "$PRODUCT $VERSION / $RELEASE_DATE starting up."
Log "Command line options: $0 ${CMD_OPTS[@]}"
$SIMULATE && LogPrint "- SIMULATION MODE -"

StageWorkflow "$WORKFLOW"

ENDTIME=$SECONDS
Log "$PROGRAM finished after $ENDTIME second(s)."
